<?php
/**
 * @file
 * Drush Status Check module.
 */

/**
 * Implements hook_menu().
 */
function drupal_status_check_menu() {
  $items['drupal-status-check/core'] = array(
    'title' => 'Check Modules',
    'description' => 'Lookup current release and check github.',
    'page callback' => 'drupal_status_check_core',
    'access arguments' => array('access content'),
  );

  return $items;
}

function drupal_status_check_core() {
  // list from https://github.com/backdrop/backdrop-issues/issues/2789
  $output = '';
  $modules_ported_to_core = array(
    'views',
    //'link',
    //'token',
    //'pathauto',
    //'date',
    //'link',
    //'email',
    //'transliteration',
    //'redirect',
    //'project_browser',
    //'entity_view_mode',
    //'file_entity'
  );
  foreach ($modules_ported_to_core as $module) {
    $drupal_org_api_url = 'https://updates.drupal.org/release-history/' . $module . '/7.x';
    $response_from_drupal = backdrop_http_request($drupal_org_api_url);
    $xml = simplexml_load_string($response_from_drupal->data);

    //$recommended_major = (string) $xml->recommended_major;
    //$recommended_minor = (string) $xml->recommended_minor;
    // @TODO will the current supported D7 release always be first?
    $release_name = (string) $xml->releases->release->name;
    $release_date = (string) $xml->releases->release->date;

    // CHECK FOR MATCHING TITLE BACKDROP CORE ISSUE QUEUE ON GITHUB
    $github_api_url = 'https://api.github.com/search/issues?q=Evaluate%20' . urlencode($release_name) . '+repo:backdrop/backdrop-issues+state:open&sort=created&order=asc';
    //$response_from_github = backdrop_http_request($github_api_url);

    //$json = drupal_json_decode($response_from_github->data);
    //dsm($json);
    //if ($json->total_count) {
      //display the first match?
      //dsm($json->items[0]['html_url']);
    //}
    $output .= 'Current Drupal Release: ' .
      $release_name .
      ' [<a href="https://github.com/backdrop/backdrop-issues/issues/new?title=Evaluate ' .
      $release_name .
      '&body=">Create Git Hub Issue</a>]</br>';

    // POST issue to GitHub.
    $issues = borg_d7_parity_post_issues($release_name, 'i did it.');
    print_r($issues);
    //dsm($release_date);

  }

  return $output;
}

/**
 * Make POST requests to GitHub/backdrop/backdrop-issues queue.
 *
 * @param string $title
 *   The issue title.
 * @param string $body
 *   The body of the issue.
 *
 * @return array
 *   JSON decoded to array of github issue data.
 */
function borg_d7_parity_post_issues($title, $body, $assignees = array()) {
  $url = "https://api.github.com/repos/backdrop/backdrop-issues/issues";
  $post_data = array(
    'title' => $title,
    'body' => $body,
    'assignees' => array(
    )
  );
  $post_data = json_encode($post_data);

  global $settings;
  $token = $settings['githubapi_token'];
  $authorization = "Authorization: token $token";

  // Initiate a curl session.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', $authorization));
  curl_setopt ($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
  $datum = curl_exec($ch);
  $res_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  return $datum;
}
